==11712== Memcheck, a memory error detector
==11712== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==11712== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==11712== Command: ./TestLife
==11712== 
Running main() from gtest_main.cc
[==========] Running 25 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 25 tests from LifeFixture
[ RUN      ] LifeFixture.parseBoardFred
[       OK ] LifeFixture.parseBoardFred (82 ms)
[ RUN      ] LifeFixture.parseBoardCon
[       OK ] LifeFixture.parseBoardCon (13 ms)
[ RUN      ] LifeFixture.parseBoardCell
[       OK ] LifeFixture.parseBoardCell (12 ms)
[ RUN      ] LifeFixture.printOutFred
[       OK ] LifeFixture.printOutFred (4 ms)
[ RUN      ] LifeFixture.turnFred
[       OK ] LifeFixture.turnFred (11 ms)
[ RUN      ] LifeFixture.turnFred2
[       OK ] LifeFixture.turnFred2 (4 ms)
[ RUN      ] LifeFixture.FredAge
[       OK ] LifeFixture.FredAge (4 ms)
[ RUN      ] LifeFixture.printOutCon
[       OK ] LifeFixture.printOutCon (4 ms)
[ RUN      ] LifeFixture.turnCon
[       OK ] LifeFixture.turnCon (11 ms)
[ RUN      ] LifeFixture.turnCon2
[       OK ] LifeFixture.turnCon2 (4 ms)
[ RUN      ] LifeFixture.turnCon3
[       OK ] LifeFixture.turnCon3 (4 ms)
[ RUN      ] LifeFixture.turnCon4
[       OK ] LifeFixture.turnCon4 (4 ms)
[ RUN      ] LifeFixture.lifeCopy
==11712== Stack overflow in thread 1: can't grow stack to 0xffe001ff8
==11712== 
==11712== Process terminating with default action of signal 11 (SIGSEGV)
==11712==  Access not within mapped region at address 0xFFE001FF8
==11712==    at 0x4C2B074: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==11712==  If you believe this happened as a result of a stack
==11712==  overflow in your program's main thread (unlikely but
==11712==  possible), you can try to increase the size of the
==11712==  main thread stack using the --main-stacksize= flag.
==11712==  The main thread stack size used in this run was 16777216.
==11712== Stack overflow in thread 1: can't grow stack to 0xffe001ff0
==11712== 
==11712== Process terminating with default action of signal 11 (SIGSEGV)
==11712==  Access not within mapped region at address 0xFFE001FF0
==11712==    at 0x4A256B0: _vgnU_freeres (in /usr/lib/valgrind/vgpreload_core-amd64-linux.so)
==11712==  If you believe this happened as a result of a stack
==11712==  overflow in your program's main thread (unlikely but
==11712==  possible), you can try to increase the size of the
==11712==  main thread stack using the --main-stacksize= flag.
==11712==  The main thread stack size used in this run was 16777216.
==11712== 
==11712== HEAP SUMMARY:
==11712==     in use at exit: 3,370,079 bytes in 210,005 blocks
==11712==   total heap usage: 210,617 allocs, 612 frees, 3,439,435 bytes allocated
==11712== 
==11712== LEAK SUMMARY:
==11712==    definitely lost: 1,152 bytes in 12 blocks
==11712==    indirectly lost: 6,336 bytes in 252 blocks
==11712==      possibly lost: 2,299 bytes in 60 blocks
==11712==    still reachable: 3,360,292 bytes in 209,681 blocks
==11712==         suppressed: 0 bytes in 0 blocks
==11712== Rerun with --leak-check=full to see details of leaked memory
==11712== 
==11712== For counts of detected and suppressed errors, rerun with: -v
==11712== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
